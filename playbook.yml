---
- hosts: all
  become: yes
  gather_facts: yes
  tasks:
    - name: "apt update"
      apt:
          update_cache: yes
          cache_valid_time: 3600

- hosts: master
  become: yes
  gather_facts: yes
  become_user: root
  tasks:
    - name: Check if docker is installed
      shell: command -v docker >/dev/null 2>&1
      register: is_docker_exist
      ignore_errors: yes

    - name: Check if kubeadm is installed
      shell: command -v kubeadm >/dev/null 2>&1
      register: is_kubeadm_exist
      ignore_errors: yes

    - debug: var=is_docker_exist

    - debug: var=is_kubeadm_exist

    - name: Installing Docker
      include_role:
        name: docker
      when: is_docker_exist.rc > 0
      tags: docker
#
    - name: Installing Kubernetes
      include_role:
        name: kubernetes
      when: is_kubeadm_exist.rc > 0
      tags: kubernetes

- hosts: master
  vars_files:
    - group_vars/all.yml
  become_user: root
  gather_facts: yes
  become: yes
  tasks:

    - name: check service
      service_facts:

    - name: Checking the status of the Kubelet
      debug:
            var: ansible_facts.services["kubelet.service"]
    - name: Reset Kubernetes
      shell: kubeadm reset --force
      register: reset_cluster
      ignore_errors: True
      run_once: True
      when: ansible_facts.services["kubelet.service"].state == "stopped"



#
    - name: Initializing kubernetes
      register: init_cluster
      run_once: True
      shell:
        kubeadm init --service-cidr {{ service_cidr }} \
          --pod-network-cidr {{ pod_network_cidr }} \
          --token {{ token }} \
          --apiserver-cert-extra-sans {{ master_ip }} \
          {{ kubeadm_opts }} \
          {{ init_opts }}
      when: ansible_facts.services["kubelet.service"].state == "stopped"


    - name: Create Kubernetes config directory
      file:
        path: ".kube/"
        state: directory
      when: init_cluster is succeeded

    - name: "Configuring kubectl for Root User"
      shell: mkdir -p $HOME/.kube;cp /etc/kubernetes/admin.conf $HOME/.kube/config;chown $(id -u):$(id -g) $HOME/.kube/config
      ignore_errors: True



    - name: Copy admin.conf to Home directory
      when: init_cluster is succeeded
      copy:
        src: "{{ kubeadmin_config }}"
        dest: ".kube/config"
        owner: "{{ ansible_user | default(ansible_user_id) }}"
        group: "{{ ansible_user | default(ansible_user_id) }}"
        mode: 0755
        remote_src: true

    - name: Find Private IP and replace with Public IP
      register: replace_ip
      replace:
          path: .kube/config
          regexp: "{{ private_ip }}"
          replace: "{{ master_ip }}"
          backup: yes

    - name: Copy Kubeconfig from Remote to Local
      fetch:
       src: .kube/config
       dest: ./kubeconfig
       flat: yes
      when: replace_ip is succeeded
      ignore_errors: True


    - name: Configuring Kubernetes Network
      command: "{{ item }}"
      with_items:
        - kubectl apply -f  https://docs.projectcalico.org/v3.10/manifests/canal.yaml
        - sleep 20
      when: init_cluster is succeeded

    - name: Configuring single node cluster
      shell: kubectl taint nodes --all node-role.kubernetes.io/master-
      ignore_errors: True

    - name: Installing Helm
      script: scripts/helm.sh
      ignore_errors: True


#
- hosts: master
  become: yes
  vars_files:
    - group_vars/all.yml
  gather_facts: yes
  roles:
    - { role: vault, tags: ['vault']}
#
